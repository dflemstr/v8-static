#!/bin/bash -eux

srcdir=$PWD
v8_revision=5.8.300

mkdir -p target
cd target

fetch-depot-tools() {
    if [ -d depot_tools ]
    then (cd depot_tools; git pull)
    else git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
    fi

    PATH=$PWD/depot_tools:$PATH
    export PATH
}

fetch-v8() {
    if [ ! -d v8 ]
    then
        fetch v8
    fi

    pushd v8
    gclient sync --reset --with_branch_heads --with_tags --revision "$v8_revision"

    cat "$srcdir/extra.gn" >> BUILD.gn

    popd
}

run-docker() {
    mkdir -p docker
    local dockerfile dockerimage
    dockerfile=docker/Dockerfile.$TARGET
    dockerimage=v8-static-build:$TARGET
    un=$(id -un)
    gn=$(id -gn)
    u=$(id -u)
    g=$(id -g)

    cat >"$dockerfile" <<EOF
FROM dflemstr/rust-buildenv:$TARGET
RUN if ! getent group $gn; then groupadd -g $g $gn; fi && \
    if ! getent passwd $un; then useradd -u $u -g $g -m $un; fi && \
    echo '%sudo ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \
    adduser $un sudo
EOF
    docker build -f "$dockerfile" -t "$dockerimage" docker
    exec docker run \
         --rm -ti \
         --entrypoint /bin/bash \
         -u root \
         -v "$srcdir:/build/$TARGET" \
         -e "TARGET=$TARGET" \
         -e "USE_DOCKER=false" \
         -e "IN_DOCKER=true" \
         "$dockerimage" \
         -c "cd /build/$TARGET && sudo -HEu $un ./build"
}

run-gn() {
    if [[ "$TARGET" =~ darwin ]]
    then
        default_gn_args=(
            'is_component_build=false'
            'is_debug=false'
            'is_official_build=true'
            'optimize_for_size=true'
            'v8_use_snapshot=true'
            'v8_use_external_startup_data=false'
            'v8_enable_i18n_support=true'
            'use_sysroot=false'
            'enable_nacl=false'
        )
    else
        default_gn_args=(
            'is_component_build=false'
            'is_debug=false'
            'is_official_build=true'
            'optimize_for_size=true'
            'clang_base_path="/usr/lib/llvm-5.0/"'
            'clang_use_chrome_plugins=false'
            'v8_use_snapshot=true'
            'v8_use_external_startup_data=false'
            'v8_enable_i18n_support=true'
            'use_sysroot=false'
            'enable_nacl=false'
        )
    fi
    pushd v8
    gn gen "out/$TARGET" --args="$(printf '%s\n' "${default_gn_args[@]}")
$(cat "$srcdir/args/$TARGET.args")"
    popd
}

build-v8() {
    ninja -C "v8/out/$TARGET" v8uber
}

prepare-upload() {
    rm -rf v8-build
    mkdir v8-build
    mkdir v8-build/include
    mv v8/include/* "v8-build/include"
    mkdir v8-build/lib
    mv "v8/out/$TARGET/obj/libv8uber.a" v8-build/lib
    tar -cvzf v8-build.tar.gz v8-build
    UPLOAD_DIR=upload/$TARGET/$(cd v8; git describe --always --tags)
    mkdir -p "$UPLOAD_DIR"
    mv v8-build.tar.gz "$UPLOAD_DIR"
}

if [ "${USE_DOCKER:-false}" = true ]
then
    run-docker
fi

fetch-depot-tools
fetch-v8
run-gn
build-v8
prepare-upload
